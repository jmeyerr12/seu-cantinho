@startmindmap
* Utility (Qualidades do "Seu Cantinho")
** Confiabilidade
*** Consistência entre filiais
**** [Cenário][Prioridade: Alta][Risco: Alto] Duas filiais tentam reservar o mesmo espaço/horário; sistema garante exclusão mútua e confirma apenas uma reserva; nenhuma perda de dados. (Evitar double-booking)
*** Integridade de dados
**** [Cenário][Alta][Médio] Em caso de falha de rede durante criação de reserva, a operação é atômica: ou confirma tudo ou reverte sem resíduos.
*** Disponibilidade
**** [Cenário][Média][Médio] API de reservas permanece disponível > 99,5% no horário comercial das 3 regiões atendidas.

** Usabilidade
*** Simplicidade para usuários com baixa familiaridade tecnológica
**** [Cenário][Alta][Médio] Dona Maria consegue criar/editar/cancelar reserva em ≤ 3 cliques e entender status de pagamento (sinal/quitado) sem treinamento. 
*** Feedback claro e tolerante a falhas
**** [Cenário][Alta][Baixo] Erros de validação exibem mensagens em linguagem simples, com sugestão de correção.

** Escalabilidade
*** Crescimento para múltiplas filiais/estados
**** [Cenário][Alta][Médio] Suportar aumento de 10x em espaços e reservas mantendo latência de criação de reserva < 2s p95.
*** Concorrência em horários de pico
**** [Cenário][Alta][Alto] 100 requisições concorrentes de criação de reserva com contenção mínima e sem conflitos confirmados.

** Desempenho
*** Latência de operações críticas
**** [Cenário][Alta][Médio] Buscar disponibilidade de um espaço para um intervalo retorna em < 500ms p95.
*** Eficiência de consulta
**** [Cenário][Média][Baixo] Listar reservas futuras paginadas responde em < 1s p95 para 10k reservas.

** Segurança
*** Pagamentos e dados sensíveis
**** [Cenário][Alta][Médio] Dados de pagamento trafegam apenas via TLS; estados “sinal pago” vs “quitada” não podem ser alterados sem autorização/logs.
*** Autenticação e autorização
**** [Cenário][Alta][Médio] Somente perfis autorizados podem alterar reservas e status financeiro; auditoria registra quem/quando/qual mudança.

** Manutenibilidade
*** Modularidade e camadas claras
**** [Cenário][Alta][Baixo] Separação de camadas (API, domínio, persistência); alteração de regra de negócio não exige mudanças em controladores REST.
*** Documentação e padrões
**** [Cenário][Média][Baixo] Código com padrões e README claros; fácil onboarding de novo desenvolvedor em < 1 dia.

** Interoperabilidade
*** APIs REST padronizadas
**** [Cenário][Alta][Baixo] Todas as operações (usuários, espaços, reservas, pagamentos) expostas via REST com OpenAPI/Swagger atualizado. 
*** Contratos estáveis
**** [Cenário][Média][Médio] Mudanças em API versionadas; clientes antigos continuam operando.

** Implantabilidade / Operabilidade
*** Execução via Docker Compose
**** [Cenário][Alta][Baixo] Sistema (back-end, front-end, banco) sobe com `docker compose up` em ambiente Linux compatível. 
*** Observabilidade
**** [Cenário][Média][Baixo] Logs estruturados + métricas básicas (latência p95, taxa de erro, throughput) por serviço.
*** Reprodutibilidade
**** [Cenário][Alta][Baixo] Ambiente reproduzível sem configuração adicional além do Docker.

** Testabilidade
*** Testes automatizados
**** [Cenário][Média][Médio] Testes de unidade de domínio e testes de API (contrato e concorrência de reserva) no CI.
*** Dados de demonstração
**** [Cenário][Média][Baixo] Seed de dados para validar fluxos CRUD rapidamente.

** Conformidade com Entrega/Processo
*** Organização em Git
**** [Cenário][Alta][Baixo] Repositório público com /src, /uml, docker-compose.yml, README.md e documentacao.pdf.
*** Modelagem UML
**** [Cenário][Média][Baixo] Diagramas de classes e componentes alinhados ao código.
@endmindmap
